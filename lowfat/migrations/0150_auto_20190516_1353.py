# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2019-05-16 13:53
from __future__ import unicode_literals

from django.db import migrations, models
from django.core.mail import EmailMessage
from django_mailbox.models import Mailbox

def move_mail(apps, schema_editor):
    Fund = apps.get_model("lowfat", "Fund")  # pylint: disable=invalid-name
    FundSentMail = apps.get_model("lowfat", "FundSentMail")  # pylint: disable=invalid-name
    for fund in Fund.objects.all():
        for counter, mail in enumerate(FundSentMail.objects.filter(fund=fund)):
            if counter == 0:
                first_message = EmailMessage(
                    "Archived message",
                    mail.justification,
                    'lowfat@software.ac.uk',
                    [mail.receiver.email]
                )
                recorded_first_message = Mailbox.objects.get(id=1).record_outgoing_message(
                    first_message.message()
                )
                fund.first_message_id = recorded_first_message.message_id
                fund.save()
            else:
                reply = EmailMessage(
                    "Re: Archived message",
                    mail.justification,
                    'lowfat@software.ac.uk',
                )
                recorded_first_message.reply(
                    reply
                )

    Expense = apps.get_model("lowfat", "Expense")  # pylint: disable=invalid-name
    ExpenseSentMail = apps.get_model("lowfat", "ExpenseSentMail")  # pylint: disable=invalid-name
    for expense in Expense.objects.all():
        for counter, mail in enumerate(ExpenseSentMail.objects.filter(expense=expense)):
            if counter == 0:
                first_message = EmailMessage(
                    "Archived message",
                    mail.justification,
                    'lowfat@software.ac.uk',
                    [mail.receiver.email]
                )
                recorded_first_message = Mailbox.objects.get(id=1).record_outgoing_message(
                    first_message.message()
                )
                expense.first_message_id = recorded_first_message.message_id
                expense.save()
            else:
                reply = EmailMessage(
                    "Re: Archived message",
                    mail.justification,
                    'lowfat@software.ac.uk',
                )
                recorded_first_message.reply(
                    reply
                )

    Blog = apps.get_model("lowfat", "Blog")  # pylint: disable=invalid-name
    BlogSentMail = apps.get_model("lowfat", "BlogSentMail")  # pylint: disable=invalid-name
    for blog in Blog.objects.all():
        for counter, mail in enumerate(BlogSentMail.objects.filter(blog=blog)):
            if counter == 0:
                first_message = EmailMessage(
                    "Archived message",
                    mail.justification,
                    'lowfat@software.ac.uk',
                    [mail.receiver.email]
                )
                recorded_first_message = Mailbox.objects.get(id=1).record_outgoing_message(
                    first_message.message()
                )
                blog.first_message_id = recorded_first_message.message_id
                blog.save()
            else:
                reply = EmailMessage(
                    "Re: Archived message",
                    mail.justification,
                    'lowfat@software.ac.uk',
                )
                recorded_first_message.reply(
                    reply
                )


def reverse_move_mail(apps, schema_editor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('lowfat', '0149_auto_20190510_1438'),
    ]

    operations = [
        migrations.AddField(
            model_name='blog',
            name='first_message_id',
            field=models.CharField(blank=True, max_length=256, null=True),
        ),
        migrations.AddField(
            model_name='expense',
            name='first_message_id',
            field=models.CharField(blank=True, max_length=256, null=True),
        ),
        migrations.AddField(
            model_name='fund',
            name='first_message_id',
            field=models.CharField(blank=True, max_length=256, null=True),
        ),
        migrations.AddField(
            model_name='historicalblog',
            name='first_message_id',
            field=models.CharField(blank=True, max_length=256, null=True),
        ),
        migrations.AddField(
            model_name='historicalexpense',
            name='first_message_id',
            field=models.CharField(blank=True, max_length=256, null=True),
        ),
        migrations.AddField(
            model_name='historicalfund',
            name='first_message_id',
            field=models.CharField(blank=True, max_length=256, null=True),
        ),
        migrations.RunPython(
            move_mail,
            reverse_move_mail
        ),
    ]

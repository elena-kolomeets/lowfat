# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-02-06 15:15
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion

OLD_TERMS_AND_CONDITIONS = [
    ("2019", "https://www.software.ac.uk/fellowship-programme/2019/terms-and-conditions"),
    ("2018", "https://www.software.ac.uk/fellowship-programme/2018/terms-and-conditions"),
    ("2017", "https://www.software.ac.uk/fellowship-terms-and-conditions-2017"),
    ("2016", "https://www.software.ac.uk/fellowship-terms-and-conditions-2016"),
    ("2015", "https://www.software.ac.uk/fellowship-terms-and-conditions-2015"),
    ("2014", "https://www.software.ac.uk/fellowship-terms-and-conditions-2014"),
    ("2013", "https://www.software.ac.uk/fellowship-terms-and-conditions-2013"),
    ("2012", "https://www.software.ac.uk/fellowship-terms-and-conditions-2012"),
]

def create_past_terms_and_conditions(apps, schema_editor):  # pylint: disable=unused-argument,invalid-name
    TermsAndConditions = apps.get_model("lowfat", "TermsAndConditions")  # pylint: disable=invalid-name
    for document in OLD_TERMS_AND_CONDITIONS:
        new_terms_and_conditions = TermsAndConditions(
            document[0],
            document[1]
        )
        new_terms_and_conditions.save()

def reverse_create_past_terms_and_conditions(apps, schema_editor):  # pylint: disable=unused-argument,invalid-name
    TermsAndConditions = apps.get_model("lowfat", "TermsAndConditions")  # pylint: disable=invalid-name
    for document in TermsAndConditions.objects.all():
        document.delete()

def assign_past_terms_and_conditions(apps, schema_editor):  # pylint: disable=unused-argument,invalid-name
    Claimant = apps.get_model("lowfat", "Claimant")  # pylint: disable=invalid-name
    TermsAndConditions = apps.get_model("lowfat", "TermsAndConditions")  # pylint: disable=invalid-name

    for claimant in Claimant.objects.all():
        application_year = claimant.application_year + 1
        terms_and_conditions = TermsAndConditions.objects.get(
            year=str(application_year + 1)
        )
        claimant.terms_and_conditions = terms_and_conditions
        claimant.save()

def reverse_assign_past_terms_and_conditions(apps, schema_editor):  # pylint: disable=unused-argument,invalid-name
    Claimant = apps.get_model("lowfat", "Claimant")  # pylint: disable=invalid-name

    for claimant in Claimant.objects.all():
        claimant.terms_and_conditions = None
        claimant.save()

class Migration(migrations.Migration):

    dependencies = [
        ('lowfat', '0122_auto_20180206_1507'),
    ]

    operations = [
        migrations.CreateModel(
            name='TermsAndConditions',
            fields=[
                ('year', models.CharField(max_length=4, primary_key=True, serialize=False)),
                ('url', models.CharField(max_length=120)),
            ],
        ),
        migrations.AddField(
            model_name='claimant',
            name='terms_and_conditions',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='lowfat.TermsAndConditions'),
        ),
        migrations.AddField(
            model_name='historicalclaimant',
            name='terms_and_conditions',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='lowfat.TermsAndConditions'),
        ),
        migrations.RunPython(
            create_past_terms_and_conditions,
            reverse_create_past_terms_and_conditions
        ),
        migrations.RunPython(
            assign_past_terms_and_conditions,
            reverse_assign_past_terms_and_conditions
        ),
    ]
